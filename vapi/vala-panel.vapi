/* vala-panel.vapi generated by valac 0.26.2, do not modify. */

namespace MenuMaker {
	[CCode (cheader_filename = "vala.h")]
	public static void append_all_sections (GLib.Menu menu1, GLib.MenuModel menu2);
	[CCode (cheader_filename = "vala.h")]
	public static GLib.MenuModel applications_model (string[] cats);
	[CCode (cheader_filename = "vala.h")]
	public static GLib.MenuModel create_applications_menu (bool do_settings);
	[CCode (cheader_filename = "vala.h")]
	public static GLib.MenuModel create_main_menu (bool submenus, string? icon);
	[CCode (cheader_filename = "vala.h")]
	public static GLib.MenuModel create_places_menu ();
	[CCode (cheader_filename = "vala.h")]
	public static GLib.MenuModel create_system_menu ();
}
namespace ValaPanel {
	namespace Key {
		[CCode (cheader_filename = "vala.h")]
		public const string BORDER;
		[CCode (cheader_filename = "vala.h")]
		public const string CAN_EXPAND;
		[CCode (cheader_filename = "vala.h")]
		public const string EXPAND;
		[CCode (cheader_filename = "vala.h")]
		public const string NAME;
		[CCode (cheader_filename = "vala.h")]
		public const string PADDING;
		[CCode (cheader_filename = "vala.h")]
		public const string POSITION;
	}
	[CCode (cheader_filename = "vala.h")]
	public class IconGrid : Gtk.Container, Gtk.Orientable {
		public IconGrid (Gtk.Orientation or, int cw, int ch, int sp, uint b, int td);
		public override void add (Gtk.Widget w);
		public override void forall_internal (bool incl, Gtk.Callback call);
		public int get_child_position (Gtk.Widget w);
		public override void get_preferred_height (out int min, out int nat);
		public override void get_preferred_width (out int min, out int nat);
		public override void map ();
		public override void realize ();
		public override void remove (Gtk.Widget w);
		public void reorder_child (Gtk.Widget child, int position);
		public void set_geometry (Gtk.Orientation or, int chw, int chh, int sp, int b, int td);
		public override void size_allocate (Gtk.Allocation a);
		public override void unmap ();
		public override void unrealize ();
		public bool aspect { get; set; }
		public int child_height { get; set construct; }
		public int child_width { get; set construct; }
		public bool constrain { get; set; }
		public bool fill_width { get; set; }
		public Gtk.Orientation orientation { get; set; }
		public int spacing { get; set construct; }
		public int target_dimension { get; set construct; }
	}
	[CCode (cheader_filename = "vala.h")]
	public class PluginSettings : GLib.Object {
		public PluginSettings (ValaPanel.ToplevelSettings settings, string name, uint num);
		public void init_configuration (ValaPanel.ToplevelSettings settings, bool has_config);
	}
	[CCode (cheader_filename = "vala.h")]
	public class ToplevelSettings : GLib.Object {
		public ToplevelSettings (string file);
		public ValaPanel.PluginSettings add_plugin_settings (string name);
		public uint find_free_num ();
		public bool init_plugin_list ();
		public void remove_plugin_settings (uint num);
		public string filename { get; private set; }
		public GLib.SList<ValaPanel.PluginSettings> plugins { get; private set; }
		public GLib.Settings settings { get; private set; }
	}
	[CCode (cheader_filename = "vala.h")]
	public static void activate_menu_launch_command (GLib.SimpleAction? action, GLib.Variant? param);
	[CCode (cheader_filename = "vala.h")]
	public static void activate_menu_launch_id (GLib.SimpleAction action, GLib.Variant? param);
	[CCode (cheader_filename = "vala.h")]
	public static void activate_menu_launch_uri (GLib.SimpleAction action, GLib.Variant? param);
	[CCode (cheader_filename = "vala.h")]
	public static int apply_menu_properties (GLib.List<Gtk.Widget> widgets, GLib.MenuModel menu);
	[CCode (cheader_filename = "vala.h")]
	public static void apply_window_icon (Gtk.Window w);
	[CCode (cheader_filename = "vala.h")]
	public static void scale_button_set_range (Gtk.ScaleButton b, int lower, int upper);
	[CCode (cheader_filename = "vala.h")]
	public static void scale_button_set_value_labeled (Gtk.ScaleButton b, int val);
	[CCode (cheader_filename = "vala.h")]
	public static void settings_as_action (GLib.ActionMap map, GLib.Settings settings, string prop);
	[CCode (cheader_filename = "vala.h")]
	public static void settings_bind (GLib.Object map, GLib.Settings settings, string prop);
	[CCode (cheader_filename = "vala.h")]
	public static void setup_button (Gtk.Button b, Gtk.Image? img = null, string? label = null);
	[CCode (cheader_filename = "vala.h")]
	public static void setup_icon (Gtk.Image img, GLib.Icon icon, Compat.Toplevel? top = null, int size = -1);
	[CCode (cheader_filename = "vala.h")]
	public static void setup_icon_button (Gtk.Button btn, GLib.Icon? icon = null, string? label = null, Compat.Toplevel? top = null);
	[CCode (cheader_filename = "vala.h")]
	public static void setup_label (Gtk.Label label, string text, bool bold, double factor);
	[CCode (cheader_filename = "vala.h")]
	public static void start_panels_from_dir (Gtk.Application app, string dirname);
}
namespace PanelCSS {
	[CCode (cheader_filename = "vala.h")]
	public static Gtk.CssProvider? apply_from_file_to_app_with_provider (string file);
	[CCode (cheader_filename = "vala.h")]
	public static void apply_from_resource (Gtk.Widget w, string file, string klass);
	[CCode (cheader_filename = "vala.h")]
	public static Gtk.CssProvider? apply_from_resource_with_provider (Gtk.Widget w, string file, string klass);
	[CCode (cheader_filename = "vala.h")]
	public static void apply_with_class (Gtk.Widget w, string css, string klass, bool add);
	[CCode (cheader_filename = "vala.h")]
	public static Gtk.CssProvider? apply_with_provider (Gtk.Widget w, string css, string klass);
	[CCode (cheader_filename = "vala.h")]
	public static string generate_background (string? name, Gdk.RGBA color);
	[CCode (cheader_filename = "vala.h")]
	public static string generate_flat_button (Gtk.Widget w, Gtk.PositionType e);
	[CCode (cheader_filename = "vala.h")]
	public static string generate_font_color (Gdk.RGBA color);
	[CCode (cheader_filename = "vala.h")]
	public static string generate_font_label (double size, bool bold);
	[CCode (cheader_filename = "vala.h")]
	public static string generate_font_size (int size);
}
